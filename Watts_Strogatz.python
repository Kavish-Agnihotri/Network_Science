import networkx as nx 
import matplotlib.pyplot as plt 

def display(g, i, ne): 
	pos = nx.circular_layout(g) 
	
	if i == '' and ne == '': 
		new_node = [] 
		rest_nodes = g.nodes() 
		new_edges = [] 
		rest_edges = g.edges() 
	else: 
		new_node = [i] 
		rest_nodes = list(set(g.nodes()) - set(new_node)) 
		new_edges = ne 
		rest_edges = list(set(g.edges()) - set(new_edges) - set([(b, a) for (a, b) in new_edges])) 
	nx.draw_networkx_nodes(g, pos, nodelist=new_node, node_color='g') 
	nx.draw_networkx_nodes(g, pos, nodelist=rest_nodes, node_color='r') 
	nx.draw_networkx_edges(g, pos, edgelist=new_edges, style='dashdot') 
	nx.draw_networkx_edges(g, pos, edgelist=rest_edges,) 
	plt.show() 

def plot_deg_dist(g): 
	all_degrees = [] 
	
	for i in nx.degree(g): 
		all_degrees.append(i[1]) 
	unique_degrees = list(set(all_degrees)) 
	unique_degrees.sort() 
	count_of_degrees = [] 

	for i in unique_degrees: 
		c = all_degrees.count(i) 
		count_of_degrees.append(c) 

	print(unique_degrees) 
	print(count_of_degrees) 

	plt.plot(unique_degrees, count_of_degrees, 'ro-') 
	plt.xlabel('Degrees') 
	plt.ylabel('Number of Nodes') 
	plt.title('Degree Distribution') 
	plt.show() 
  
G = nx.watts_strogatz_graph(n = 10, k = 4, p = 0.5) 
pos = nx.circular_layout(G) 
  
plt.figure(figsize = (12, 12)) 
# nx.draw_networkx(G, pos) 
display(G, '', '') 
plot_deg_dist(G)